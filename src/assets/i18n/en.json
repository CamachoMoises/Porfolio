{
	"navbar": {
		"page": "Pages",
		"title": {
			"principal": "Portfolio",
			"popUp": "Designed by Invision. Coded by Moses!!!!!"
		},
		"links": {
			"about": "About",
			"knowledge": "Skills and Knowledge",
			"gallery": "Project Gallery",
			"calendar": "Calendar",
			"rickAndMorty": "Rick and Morty App",
			"checkList": "Check List",
			"NBAPlayers": "NBA Players",
			"Org-chart": "Organizational chart",
			"React": "React notes",
			"unfinished": "unfinished"
		},
		"twitter": "Contact me on Twitter ",
		"facebook": "Visit my Facebook ",
		"github": "Look at the repository with the projects ",
		"linkedIn": "Join my network on LinkedIn ",
		"lang": {
			"title": "Language",
			"popUp": "Change the language of the page"
		}
	},
	"profile": {
		"title": "Professional Profile",
		"whoIam": "Who I am?",
		"description": "Born in Venezuela specifically in the Falcón state in 1994, I am passionate about technology that from a very young age, thanks to the work of my parents and a desktop PC with a first-generation Pentium, began his path towards becoming a professional and enthusiastic for the technological innovations that arise every day. ",
		"education": {
			"title": "Higher education",
			"education_line": {
				"1": "Formed at the Universidad de Oriente (2010-2017) as a systems engineer ",
				"2": "with approved thesis in publication mention",
				"3": "project designer according to proven technical, operational and economic feasibility",
				"4": "control information systems and formulating plans and strategies in projects of various magnitudes"
			}
		},
		"professional": {
			"title": "Professional experience",
			"type": "Remote",
			"role": "Role of the position",
			"job1": {
				"position": "Network analyst",
				"description": "In charge of the maintenance and operation of the computer system, as well as the connection of the company's networks and internet."
			},
			"job2": {
				"position": "Web designer",
				"description": "Responsible for the design and implementation of a web application for inventory control with PHP and Laravel framework in oil maintenance works through loop tests."
			},
			"job3": {
				"position": "Technical Support Analyst",
				"description": "Administrator of the electronic equipment and Software involved in the company, maintenance of the servers, support of the payroll and accounting systems of the company."
			},
			"job4": {
				"position": "Automation Engineer",
				"description": "Responsible for the maintenance of the elements associated with the control of fuel gas processing equipment, Administrator of the SCADA real-time visualization systems."
			},
			"job5": {
				"position": "Web Developer (FrontEnd)",
				"description": "In charge of the design and implementation of the structure, interface of parts of the developed application, registration of the data of the forms, sent to the server, requests and filtering."
			},
			"job6": {
				"position": "Web Developer (Full stack)",
				"description": "With the responsibility of developing both the user interface and the RESTful API to manage employee information, generate reports and build an organizational chart"
			}
		}
	},
	"knowledge": {
		"title": "Skills and Knowledge",
		"abilities": {
			"tittle": "Skills",
			"button": {
				"More": "More"
			},
			"frontend": {
				"title": "Frontend development",
				"HTML": {
					"title": "HTML",
					"subtitle": "Version 5",
					"list": {
						"first": "Usage of Tags",
						"second": "Attribute handling",
						"third": "Using and modifying DOM elements with id and class",
						"fourth": "Links or hyperlinks that tell the browser where to go using an href attribute, which stores a URL. ",
						"fifth": "Using the Div container for content divisions",
						"sixth": "Line breaks",
						"seventh": "building ordered and unordered lists to present multiple elements or characteristics",
						"eighth": "Table building to organize more complex information"
					}
				},
				"CSS": {
					"title": "CSS",
					"subtitle": "Versión 3",
					"list": {
						"first": "Using Element Selectors to Modify HTML Tags",
						"second": "Handling id selectors and attribute selectors",
						"third": "Selection of nested 'Child' elements",
						"fourth": "Using the Universal Selector '*' ",
						"fifth": "Use of pseudo selectors"
					}
				},
				"javascript": {
					"title": "Javascript",
					"subtitle": "ECMAScript 9",
					"description": "Management of concepts ",
					"preview": {
						"first": "DOM",
						"second": "Functions",
						"third": "Modules",
						"fourth": "Objects",
						"fifth": "String",
						"sixth": "Promises",
						"seventh": "Syntax",
						"eighth": "Variables",
						"ninth": "Fetch API",
						"tenth": "Arrays",
						"eleventh": "Class"
					},

					"SubList": {
						"first": {
							"first": "Events",
							"second": "DOMContendLoaded",
							"third": "DOM Changes",
							"fourth": "Focus, blur",
							"fifth": "KeyUp/ KeyDown",
							"sixth": "EventListener",
							"seventh": "CurrentTarget"
						},
						"second": {
							"first": "=>(arrow functions)",
							"second": "Asynchronous callbacks",
							"third": "Closures",
							"fourth": "Lexical scopes",
							"fifth": "Hoisting",
							"sixth": "Passing functions",
							"seventh": "Default parameters",
							"eighth": "Implicit return"
						},
						"third": {
							"first": "ES Modules",
							"second": "Importing from libraries",
							"third": "Package managers",
							"fourth": "Default Exports",
							"fifth": "Imports",
							"sixth": "Dynamic imports"
						},
						"fourth": {
							"first": "property access",
							"second": "Object Shorthand",
							"third": "Dynamic properties",
							"fourth": "Destructuring",
							"fifth": ".Values()",
							"sixth": "?? (nullish coalescing)",
							"seventh": "...(spread)",
							"eighth": "?.(Optional chaining)"
						},
						"fifth": {
							"first": "[] (Characters access)",
							"second": "Template strings",
							"third": "Concatenations",
							"fourth": ".trim()",
							"fifth": ".toUpperCase()",
							"sixth": ".toLowerCase()",
							"seventh": ".substring()",
							"eighth": ".startWith()",
							"ninth": ".split()",
							"tenth": ".replaceAll()",
							"eleventh": ".replace()",
							"twelfth": ".length",
							"thirteenth": ".includes()",
							"fourteenth": ".endsWith()"
						},
						"sixth": {
							"first": "state",
							"second": "new Promise()",
							"third": "await Keyword",
							"fourth": "async / await",
							"fifth": "async functions",
							"sixth": "Promise.resolve()",
							"seventh": "Promise.reject()",
							"eighth": ".then()",
							"ninth": ".finally()",
							"tenth": ".catch()"
						},
						"seventh": {
							"first": "try ... catch",
							"second": "Operator if",
							"third": "for ... of",
							"fourth": "for ... in",
							"fifth": "for(loops)",
							"sixth": "Semi-colons",
							"seventh": "Exceptions"
						},
						"eighth": {
							"first": "var(legacy)",
							"second": "declarations let",
							"third": "declarations const",
							"fourth": "Temporal dead zone"
						},
						"ninth": {
							"first": "fetch()",
							"second": "Response.json()",
							"third": "Response status code",
							"fourth": "Method PUT",
							"fifth": "Method POST",
							"sixth": "JSON.stringify()",
							"seventh": "JSON.parse()",
							"eighth": "Method GET",
							"ninth": "Fetch Wrapper",
							"tenth": "Error handling",
							"eleventh": "Method DELETE"
						},
						"tenth": {
							"first": ".every()",
							"second": ".filter()",
							"third": ".find()",
							"fourth": ".forEach()",
							"fifth": ".includes()",
							"sixth": ".join()",
							"seventh": ".length",
							"eighth": ".map()",
							"ninth": ".push()",
							"tenth": ".reduce()",
							"eleventh": ".some()",
							"twelfth": ".splice()",
							"thirteenth": "Arrays of objects",
							"fourteenth": "[] get items",
							"fifteenth": "Destructuring"
						},
						"eleventh": {
							"first": "Getters",
							"second": "Class vs functions",
							"third": "Private class fields",
							"fourth": "Public class fields",
							"fifth": "inheritance",
							"sixth": "Super()",
							"seventh": "Instances method",
							"eighth": "Instances variables",
							"ninth": "Setters",
							"tenth": "Static methods"
						}
					}
				},
				"angular": {
					"title": "Angular",
					"subtitle": "Version 11+",
					"preview": {
						"first": "Management of components, modules, services and interfaces",
						"second": "Use of directives",
						"third": "Building modular applications",
						"fourth": "Design PWA and single page applications",
						"fifth": "Use of lazy loading for decrease time loading"
					},
					"list": {
						"first": "Component creation, nested components: the use of tags, component creation with the CLI, string interpolation, property binding, event binding, two-way data-binding, use of Input and output with their aliases, style encapsulation, local references, viewChild, ng-content use the component's lifecycle and ContendChid methods",
						"second": "The use and creation of directives: I use the ngIf with ng-template, apply styles dynamically with inStyle, apply CSS dynamically with ngClass, Show Lists in ngFor, hostListener and hostBinding for DOM events, Use of ngSwicth",
						"third": "Consumption of Services: inject services into components for data use, use of services for communication between components, creation of methods that call instances injected into components",
						"fourth": "Use of route modules: creation of route modules by CLI definition of the path, redirect, route parameters, creation of nested routes children , the router-outlet, routerLink the use of relative and absolute routes, use of the directives routerLinkActive and routerlinkActiveOptions to apply the correct style to labels, use of the router to navigate from the methods of injected services, use of query parameters and fragments, control access to routes and nested routes with authGuard, verify if the changes in a component are save before leaving the route, dynamic data binding between routes and components, asynchronous routes",
						"fifth": "Observable consumption and subscriptions: creation of custom observables with operators, use of Subjects, use of lazy loading to load only the necessary modules ",
						"sixth": "Creation of forms and reactive forms: recognize the data loaded to the form, use of validators with patterns, modified validators, ng-invalid, ng-touched to disable the loading of erroneous data, add messages to validate the form data, apply values defaults to form inputs, use of two-way data-binding for dynamic data loading, use of validator error codes, use of asynchronous data.",
						"seventh": "Use of pipes and data transformation: creation of pipes by CLI by parameterized the pipes, custom pipes, asynchronous pipes, search filters, pipes to reduce data load executions"
					}
				},
				"NPM": {
					"title": "NPM",
					"subtitle": "Frontend Packages",
					"list": {}
				}
			},
			"backend": {
				"title": "Backend development",
				"nodejs": {
					"title": "Node Js",
					"subtitle": "Version 12+",
					"description": "Project creation with Node.js for Rest API solutions, request handling: data, files and connection with different types of database architectures "
				},
				"express": {
					"title": "Express",
					"subtitle": "version 4+",
					"description": "The most widely used web application development infrastructure in the Node.js development environment",
					"details":{
						"title": "Designed to build scalable network applications",
						"user":"Users handle",
						"package": "Packages",
						"description": "Node.js app runs in a single process, without creating a new thread for every request, That provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blocking. ",
						"variables": "read environment variables with process core module of Node.js",
						"argument":"accept arguments from the command line",
						"File_system":{
							"title": "File system management",
							"list":{
								
								"first":"Read files",
								"second":"Create files",
								"third":"Update files",
								"fourth":"Delete files",
								"fifth":"Rename files"
							}
						},
						"modules":{
							"title": "Modules in Node.js",
							"description": "Built-in Modules and custom"
						},
						"express":{
							"description":"A framework that works together with Node.Js to create API-Rest in a simple way",
							"subtitle":"Using express to routing",
							"Middleware":{
								"title": "middleware for use in Express",
								"description": "functions that have access to the request object (req), the response object (res)",
								"Router":"Router-level middleware",
								"error": "Error-handling ",
								"third-party":"Third-party middleware"
							},
							"Routing": {
								"title":"Using express to routing",
								"Paths":"Route paths",
								"methods":"Route methods",
								"parameters":"Route parameters",
								"handlers":"Route handlers"
							},
							"methods":{
								"title":"HTTP methods of express"
								
							}
						
						},
						"Mysql":"Designing to manage connections to the MySQL database with the continuation of the MySQL-Native NPM package."
						
				
					}
				},
				"NPM": {
					"title": "NPM",
					"subtitle": "Backend Packages",
					"list": {}
				}
			},
			"database": {
				"title": "Database manager",
				"description":"Version 5+",
				"mysql": {
					"title": "",
					"subtitle": ""
				}
			},
			"software": {
				"title": "Software and other facilities",
				"list": {
					"git": {
						"title": "Diagram",
						"description": "As a fundamental part of software development today is the management of versions and the use of development branches",
						"sheet": {
							"remote": {
								"title": "Remote origin",
								"command": "git remote"
							},
							"clone": {
								"title": "Clone repositories",
								"command": "git clone"
							},
							"fetch": {
								"title": "Check changes with fetch",
								"command": "git fetch"
							},
							"pull": {
								"title": "Incorporate changes from a remote repository",
								"command": "git pull"
							},
							"push": {
								"title": "Upload content to a remote repository ",
								"command": "git push"
							},
							"merge": {
								"title": "Merge two branches of work",
								"command": "git merge"
							}
						}
					},
					"firebase": {
						"description": "A entire backend solution ",
						"sheet": {
							"hosting": {
								"title": "Firebase Hosting",
								"description": "A content storage service for web applications, whether dynamic or static content, in addition to the micro services that the page may have."
							},
							"cloud-storage": {
								"title": "Cloud Storage",
								"description": "For the needs of storing and delivering user-generated content, such as photos or videos."
							},
							"realtime-database": {
								"title": "Real time Database",
								"description": "Store and sync data with a cloud-hosted NoSQL database. Data is synced with all clients in real time and remains available when the app is offline "
							},
							"firestore database": {
								"title": "",
								"description": ""
							},
							"stotage": {
								"title": "",
								"description": ""
							}
						}
					},
					"clever-cloud": {
						"description": "Web services in the cloud, with a pay-as-you-go pricing model. No infrastructure to manage",
						"database": {
							"mysql": "Addons for Mysql",
							"description": "An open source relational database management system with a host address that is accessible by username and password"
						}
					},
					"cloudinary": {
						"tittle": "It optimizes media for delivery on any device",
						"description": "Cloudinary is used in cloud-based image and video management for web and mobile applications.",
						"list": {
							"first": "Media Upload ",
							"second": "Image transformations",
							"third": "Video transformations",
							"fourth": "Add-ons for: Auto-Tagging, Protection, Analysis, Detection"
						}
					},
					"heroku": {
						"description": "To deploy Node.js applications from your CLI or directly from GitHub"
					},
					"postman": {
						"description": "For API tests without the need to have an application that makes the requests and with more resources than the browser"
					},
					"visual-studio": {
						"description": ""
					}
				}
			}
		}
	},
	"gallery": {
		"title": "Project Gallery",
		"subtitle": "Web designer",
		"B-L-Project": {
			"title": "Tittle B&L",
			"description": "Inventory management project...",
			"carousel": {
				"first": "Login",
				"second": "Register",
				"third": "Home",
				"fourth": "Products list",
				"fifth": "Product info",
				"sixth": "Form input",
				"seventh": "Form output",
				"eighth": "Products details",
				"ninth": "Supplier Form"
			}
		},
		"Hogwarts": {
			"title": "Tittle Hogwarts",
			"description": "...",
			"carousel": {
				"first": "0000",
				"second": "00000",
				"third": "0000",
				"fourth": "000000",
				"fifth": "0000000",
				"sixth": "00000"
			}
		},
		"prolix": {
			"title": "Tittle Prolix",
			"description": "...",
			"carousel": {
				"first": ".",
				"second": ".",
				"third": ".",
				"fourth": ".",
				"fifth": ".",
				"sixth": ".",
				"seventh": ".",
				"eighth": ".",
				"ninth": ".",
				"tenth": ".",
				"eleventh": ".",
				"twelfth": ".",
				"thirteenth": ".",
				"fourteenth": ".",
				"fifteenth": ".",
				"sixteenth": "...",
				"seventeenth": "..."
			}
		},
		"technoidentia": {
			"title": "Tittle TechnoIDentia",
			"description": "...",
			"carousel": {
				"first": ".",
				"second": ".",
				"third": ".",
				"fourth": ".",
				"fifth": ".",
				"sixth": "."
			}
		},
		"IMVITRACV": {
			"title": "IMVITRACV",
			"description": "...",
			"carousel": {
				"first": ".",
				"second": ".",
				"third": ".",
				"fourth": ".",
				"fifth": ".",
				"sixth": ".",
				"seventh": "."
			}
		}
	},
	"home": {
		"welcome": "Welcome",
		"desc": "A brief walk through the projects in which I have participated",
		"modal": {
			"desc": "A pleasure that you have entered my personal page, this is a project still in development and presents incomplete sections and with bugs, Even so, I hope it is to your liking and if you wish you can contact me in the form below, through my social networks or my email.",
			"close": "close"
		}
	},
	"calendar": {
		"title": "Reactive Calendar",
		"banner": {
			"date": "Date",
			"inputs": "Inputs",
			"about": "About the project ",
			"desc": "Angular, Angular Material, TypeScript, RxJS, Firebase, and AngularFire were used as the core technology to create a fully reactive calendar that works in real time.",
			"search": "Search",
			"add": "Add",
			"view": {
				"title": "View Type",
				"MONTH": "Month",
				"WEEK": "Week",
				"DAY": "Day"
			}
		}
	},
	"contact": {
		"title": "Do you want to contact me?",
		"subtitle": "Your project is important to me",
		"email": "Email",
		"phone": "Phone",
		"comments": "Left me a comment",
		"comments2": "Write me a message",
		"button": "Send message"
	},
	"notes": {
		"title": "New Notes",
		"inputs": {
			"topic":{
				"name":"Topic",
				"Hit":"Context of the note",
				"placeholder":"Please enter a topic",
				"error_required":"This field can't be ",
				"error_maxLength":"This field couldn't be "
			},
			"Note":{
				"name": "Note",
				"Hit":"For new registers!",
				"placeholder":"Ex. Things you discovered while you were learning ",
				"error":"The field can't be"
			}
			
		},
		"notes_tittle":"Notes",
		"description": "I hope you like it and find some interesting tips ",
		"save_button":"Save",
		"popUp_save":"Sorry, only the owner can add new notes",
		"popUp_delete":"Sorry, only the owner can delete notes"

	}

}
